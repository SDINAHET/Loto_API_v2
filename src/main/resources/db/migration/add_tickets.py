# import requests
# import uuid
# from datetime import datetime, timedelta

# # ‚úÖ Configuration de l'API
# API_URL = "http://localhost:8082/api/tickets"
# USER_ID = "4548597d-85e8-4c6b-b1db-029a0e0cf276"

# # ‚úÖ Ton token JWT (‚ö†Ô∏è Remplace "TON_TOKEN" par une variable s√©curis√©e)
# JWT_TOKEN = "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0MjBAaGJuYi5jb20iLCJyb2xlcyI6WyJST0xFX1VTRVIiXSwiaWF0IjoxNzQxNzA4MzcyLCJleHAiOjE3NDE3OTQ3NzJ9._F4UixdluMEI5w4aFwompn5KJ3AMQfXw5AO3LMiPghs"

# # ‚úÖ Fonction pour g√©n√©rer toutes les dates de tirage (lundi, mercredi, samedi)
# def generate_draw_dates(start_year=2019, end_year=2026):
#     draw_dates = []
#     start_date = datetime(start_year, 1, 1)
#     end_date = datetime(end_year, 12, 31)

#     while start_date <= end_date:
#         if start_date.weekday() in [0, 2, 5]:  # Lundi (0), Mercredi (2), Samedi (5)
#             draw_dates.append(start_date.strftime("%Y-%m-%d"))
#         start_date += timedelta(days=1)

#     return draw_dates

# # ‚úÖ Fonction pour envoyer un ticket via POST avec le token JWT
# def post_ticket(draw_date):
#     ticket_data = {
#         "id": str(uuid.uuid4()),
#         "userId": USER_ID,
#         "numbers": "4-17-23-38-44",
#         "chanceNumber": "3",
#         "drawDate": draw_date,
#         "createdAt": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
#         "updatedAt": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
#     }

#     headers = {
#         "Authorization": f"Bearer {JWT_TOKEN}",  # ‚úÖ Ajout du token JWT dans le header
#         "Content-Type": "application/json"
#     }

#     try:
#         response = requests.post(API_URL, json=ticket_data, headers=headers)
#         if response.status_code in [200, 201]:
#             print(f"‚úÖ Ticket ajout√© pour {draw_date}")
#         else:
#             print(f"‚ùå Erreur {response.status_code} pour {draw_date} : {response.text}")
#     except Exception as e:
#         print(f"‚ö†Ô∏è Erreur lors de l'envoi du ticket pour {draw_date} : {e}")

# # ‚úÖ Ex√©cution du script
# if __name__ == "__main__":
#     draw_dates = generate_draw_dates()
#     print(f"Total des tirages g√©n√©r√©s : {len(draw_dates)}")

#     for date in draw_dates:
#         post_ticket(date)

# import requests
# import uuid
# import os
# import time
# from datetime import datetime, timedelta
# from requests.adapters import HTTPAdapter
# from requests.packages.urllib3.util.retry import Retry

# # ‚úÖ Configuration de l'API
# API_URL = "http://localhost:8082/api/tickets"
# USER_ID = "4548597d-85e8-4c6b-b1db-029a0e0cf276"

# # ‚úÖ R√©cup√©rer le token JWT depuis une variable d'environnement (meilleure s√©curit√©)
# JWT_TOKEN = os.getenv("JWT_TOKEN", "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0MjBAaGJuYi5jb20iLCJyb2xlcyI6WyJST0xFX1VTRVIiXSwiaWF0IjoxNzQxNzA4MzcyLCJleHAiOjE3NDE3OTQ3NzJ9._F4UixdluMEI5w4aFwompn5KJ3AMQfXw5AO3LMiPghs")  # ‚ö†Ô∏è Mets ton token ici si non d√©fini

# # ‚úÖ V√©rification que le token est bien fourni
# if JWT_TOKEN == "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0MjBAaGJuYi5jb20iLCJyb2xlcyI6WyJST0xFX1VTRVIiXSwiaWF0IjoxNzQxNzA4MzcyLCJleHAiOjE3NDE3OTQ3NzJ9._F4UixdluMEI5w4aFwompn5KJ3AMQfXw5AO3LMiPghs":
#     print("‚ö†Ô∏è ERREUR : Le token JWT est manquant ! D√©finis la variable d'environnement JWT_TOKEN.")
#     exit(1)

# # ‚úÖ Configuration des headers pour l'authentification JWT
# HEADERS = {
#     "Authorization": f"Bearer {JWT_TOKEN}",
#     "Content-Type": "application/json"
# }

# # ‚úÖ Cr√©ation d'une session HTTP avec retry automatique
# session = requests.Session()
# retry_strategy = Retry(
#     total=3,  # Nombre maximum de tentatives
#     backoff_factor=1,  # Temps d'attente avant retry (exponentiel)
#     status_forcelist=[500, 502, 503, 504]  # Codes d'erreur √† re-tenter
# )
# adapter = HTTPAdapter(max_retries=retry_strategy)
# session.mount("http://", adapter)
# session.mount("https://", adapter)

# # ‚úÖ Fonction pour g√©n√©rer les dates de tirage (lundi, mercredi, samedi)
# def generate_draw_dates(start_year=2019, end_year=2026):
#     draw_dates = []
#     start_date = datetime(start_year, 1, 1)
#     end_date = datetime(end_year, 12, 31)

#     while start_date <= end_date:
#         if start_date.weekday() in [0, 2, 5]:  # Lundi (0), Mercredi (2), Samedi (5)
#             draw_dates.append(start_date.strftime("%Y-%m-%d"))
#         start_date += timedelta(days=1)

#     return draw_dates

# # ‚úÖ Fonction pour envoyer un ticket via POST avec gestion d'erreurs
# def post_ticket(draw_date):
#     ticket_data = {
#         "id": str(uuid.uuid4()),  # G√©n√©ration d'un UUID unique
#         "userId": USER_ID,
#         "numbers": "4-17-23-38-44",
#         "chanceNumber": "3",
#         "drawDate": draw_date,
#         "createdAt": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
#         "updatedAt": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
#     }

#     try:
#         response = session.post(API_URL, json=ticket_data, headers=HEADERS)

#         if response.status_code in [200, 201]:
#             print(f"‚úÖ Ticket ajout√© pour {draw_date}")
#         elif response.status_code == 403:
#             print(f"‚õî ERREUR 403 : Acc√®s interdit pour {draw_date} - V√©rifie les permissions !")
#         elif response.status_code == 401:
#             print(f"üö® ERREUR 401 : Token JWT invalide ou expir√© pour {draw_date} !")
#         else:
#             print(f"‚ùå Erreur {response.status_code} pour {draw_date} : {response.text}")

#     except requests.exceptions.RequestException as e:
#         print(f"‚ö†Ô∏è Erreur r√©seau pour {draw_date} : {e}")
#         time.sleep(2)  # Attendre avant de r√©essayer

# # ‚úÖ Ex√©cution du script
# if __name__ == "__main__":
#     draw_dates = generate_draw_dates()
#     print(f"üéØ Total des tirages g√©n√©r√©s : {len(draw_dates)}")

#     for date in draw_dates:
#         post_ticket(date)

#     print("üöÄ Tous les tickets ont √©t√© envoy√©s !")

import sqlite3
import uuid
from datetime import datetime, timedelta

# ‚úÖ Nom de la base de donn√©es SQLite
DB_NAME = "loto.db"

# ‚úÖ Connexion √† SQLite
conn = sqlite3.connect(DB_NAME)
cursor = conn.cursor()

# ‚úÖ Cr√©ation de la table si elle n'existe pas
cursor.execute("""
CREATE TABLE IF NOT EXISTS tickets (
    id TEXT PRIMARY KEY,
    user_id TEXT,
    numbers TEXT,
    chance_number TEXT,
    draw_date TEXT,
    created_at TEXT,
    updated_at TEXT
);
""")
conn.commit()

# ‚úÖ G√©n√©ration des dates de tirage (lundi, mercredi, samedi)
def generate_draw_dates(start_year=2019, end_year=2026):
    draw_dates = []
    start_date = datetime(start_year, 1, 1)
    end_date = datetime(end_year, 12, 31)

    while start_date <= end_date:
        if start_date.weekday() in [0, 2, 5]:  # Lundi (0), Mercredi (2), Samedi (5)
            draw_dates.append(start_date.strftime("%Y-%m-%d"))
        start_date += timedelta(days=1)

    return draw_dates

# ‚úÖ Insertion des tickets dans la base SQLite
def insert_tickets():
    draw_dates = generate_draw_dates()
    print(f"üéØ Total des tirages g√©n√©r√©s : {len(draw_dates)}")

    # ‚úÖ D√©but d'une transaction pour acc√©l√©rer les insertions
    conn.execute("BEGIN TRANSACTION")
    for draw_date in draw_dates:
        ticket_data = (
            str(uuid.uuid4()),  # G√©n√©ration d'un UUID unique
            "4548597d-85e8-4c6b-b1db-029a0e0cf276",  # User ID
            "4-17-23-38-44",  # Nombres jou√©s
            "3",  # Num√©ro chance
            draw_date,  # Date du tirage
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),  # Date de cr√©ation
            datetime.now().strftime("%Y-%m-%d %H:%M:%S")   # Date de mise √† jour
        )

        cursor.execute("""
            INSERT INTO tickets (id, user_id, numbers, lucky_number, draw_date, created_at, updated_at)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, ticket_data)

    # ‚úÖ Validation des insertions
    conn.commit()
    print("üöÄ Tous les tickets ont √©t√© ins√©r√©s dans SQLite !")

# ‚úÖ Ex√©cuter l'insertion
if __name__ == "__main__":
    insert_tickets()
    conn.close()
